Question : Tree Burning

Description : You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.
Each minute, a node becomes infected if:
The node is currently uninfected.
The node is adjacent to an infected node.
Return the number of minutes needed for the entire tree to be infected.

Solution : 
class Solution {
public:
    // Helper function to create an adjacency list from the tree
    void buildGraph(TreeNode* root, unordered_map<int, vector<int>>& graph) {
        if (!root) return;
        if (root->left) {
            graph[root->val].push_back(root->left->val);
            graph[root->left->val].push_back(root->val);
            buildGraph(root->left, graph);
        }
        if (root->right) {
            graph[root->val].push_back(root->right->val);
            graph[root->right->val].push_back(root->val);
            buildGraph(root->right, graph);
        }
    }

    // Helper function to find the farthest distance using DFS
    int dfs(int node, unordered_map<int, vector<int>>& graph, unordered_set<int>& visited, int& maxDistance) {
        visited.insert(node);
        int distance = 0;
        for (int neighbor : graph[node]) {
            if (!visited.count(neighbor)) {
                int depth = dfs(neighbor, graph, visited, maxDistance);
                maxDistance = max(maxDistance, distance + depth + 1);
                distance = max(distance, depth + 1);
            }
        }
        return distance;
    }

    int amountOfTime(TreeNode* root, int start) {
        // Build the graph from the tree structure
        unordered_map<int, vector<int>> graph;
        buildGraph(root, graph);

        // Use DFS to find the maximum path length
        unordered_set<int> visited;
        int maxDistance = 0;
        dfs(start, graph, visited, maxDistance);
        return max(0,maxDistance-1);
    }
};
