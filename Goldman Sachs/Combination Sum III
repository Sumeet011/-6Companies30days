Question : Combination Sum III

Description : Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

Solution : 
class Solution {
public:
    void power_set(int idx, vector<int> &nums, int k, int n, vector<vector<int>> &ans, vector<int> &subset) {
        if (subset.size() == k && n == 0) {
            ans.push_back(subset);
            return;
        }
        if (idx >= nums.size() || n < 0) return;
        subset.push_back(nums[idx]);
        power_set(idx + 1, nums, k, n - nums[idx], ans, subset);
        subset.pop_back();
        power_set(idx + 1, nums, k, n, ans, subset);
    }

    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        vector<int> subset;
        vector<int> nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        power_set(0, nums, k, n, ans, subset);
        return ans;
    }
};
