Question : Letter Combinations of a Phone Number

Description : Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Solution : class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> ans;
        vector<string> m = {"abc", "def",  "ghi", "jkl","mno", "pqrs", "tuv", "wxyz"};

        if (digits.empty()) {
            return ans; // Return empty result if no digits are given
        }

        if (digits.size() == 1) {
            string A = m[digits[0] - '0' - 2];
            for (int i = 0; i < A.size(); i++) {
                string s(
                    1,
                    A.at(i)); // Convert the character to a string and push it
                ans.push_back(s);
            }
        }

        if (digits.size() == 2) {
            string A = m[digits[0] - '0' - 2];
            string B = m[digits[1] - '0' - 2];
            for (int i = 0; i < A.size(); i++) {
                for (int j = 0; j < B.size(); j++) {
                    string ch =
                        string(1, A.at(i)) + B.at(j); // Concatenate characters
                    ans.push_back(ch);
                }
            }
        }

        if (digits.size() == 3) {
            string A = m[digits[0] - '0' - 2];
            string B = m[digits[1] - '0' - 2];
            string C = m[digits[2] - '0' - 2];
            for (int i = 0; i < A.size(); i++) {
                for (int j = 0; j < B.size(); j++) {
                    for (int k = 0; k < C.size(); k++) {
                        string ch = string(1, A.at(i)) + B.at(j) +
                                    C.at(k); // Concatenate characters
                        ans.push_back(ch);
                    }
                }
            }
        }

        if (digits.size() == 4) {
            string A = m[digits[0] - '0' - 2];
            string B = m[digits[1] - '0' - 2];
            string C = m[digits[2] - '0' - 2];
            string D = m[digits[3] - '0' - 2];
            for (int i = 0; i < A.size(); i++) {
                for (int j = 0; j < B.size(); j++) {
                    for (int k = 0; k < C.size(); k++) {
                        for (int l = 0; l < D.size(); l++) {
                            string ch = string(1, A.at(i)) + B.at(j) + C.at(k) +
                                        D.at(l); // Concatenate characters
                            ans.push_back(ch);
                        }
                    }
                }
            }
        }

        return ans;
    }
};
