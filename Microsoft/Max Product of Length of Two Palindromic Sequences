Question : Given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized.
The two subsequences are disjoint if they do not both pick a character at the same index.
Return the maximum possible product of the lengths of the two palindromic subsequences.
A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
A string is palindromic if it reads the same forward and backward.

difficulty : Medium 
solution : class Solution {
public:
    int maxProduct(string s) {
        int n = s.size();
        vector<pair<int, int>> palindromes; // {bitmask, length}

        for (int mask = 1; mask < (1 << n); ++mask) {
            string substring;
            for (int i = 0; i < n; ++i) {
                if (mask & (1 << i)) {
                    substring += s[i];
                }
            }
            if (isPalindrome(substring)) {
                palindromes.push_back({mask, (int)substring.size()});
            }
        }

        int maxProduct = 0;
        int m = palindromes.size();

        for (int i = 0; i < m; ++i) {
            for (int j = i + 1; j < m; ++j) {
                if ((palindromes[i].first & palindromes[j].first) == 0) { // No common characters
                    int product = palindromes[i].second * palindromes[j].second;
                    maxProduct = max(maxProduct, product);
                }
            }
        }

        return maxProduct;
    }

private:
    bool isPalindrome(const string& str) {
        int left = 0, right = str.size() - 1;
        while (left < right) {
            if (str[left++] != str[right--]) return false;
        }
        return true;
    }
};
