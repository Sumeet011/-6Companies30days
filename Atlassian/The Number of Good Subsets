Question : The Number of Good Subsets

Description : You are given an integer array nums. We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.
For example, if nums = [1, 2, 3, 4]:
[2, 3], [1, 2, 3], and [1, 3] are good subsets with products 6 = 2*3, 6 = 2*3, and 3 = 3 respectively.
[1, 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively.
Return the number of different good subsets in nums modulo 109 + 7.
A subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.

Solution : 
class Solution {
public:

    long long dp[1025][1025]; 

    
    long long binary_exponentiation(int a , long long x , int md){
        if(x == 0) return 1; 
        long long half = binary_exponentiation(a , x/2 , md)%md; 
        if(x%2 == 0){
            return ( half % md * half % md ) % md; 
        }
        return (a % md * half % md * half % md) % md; 
    }


    long long get_value(vector < long long > &v , int index , int mask , 
    map < long long , long long > & mp){

        int md = 1e9 + 7; 
        if(index == v.size()) return (mask > 0); 
        if(dp[index][mask] != -1) return dp[index][mask];
        // non _take
        long long a = get_value(v , index+1 , mask , mp) % md; 
        long long b = 0; 
        // Take (after checking)
        if( (mask & v[index]) == 0){
            b = ((mp[v[index]] % md)*(get_value(v , index+1 , mask | (v[index])  , mp) % md)%md) % md; 
        }
        return dp[index][mask] = (a%md + b%md)%md; 

    }

    void can_take(int x , int primes[] , map < long long , long long > & mp){

        bool check = true; 
        long long num = 0; 
        for(int i = 0 ; i< 10 ; i++){
            int cnt = 0;
            while(x % primes[i] == 0) {
                x /= primes[i]; 
                cnt++;
                // if duplicate is there than remove. 
                if(cnt > 1){
                    check = false; 
                    break; 
                }
            }
            if(cnt == 1) num |= (1<<i); 
        }
        if(check){
            mp[num]++; 
        }
    }
    int numberOfGoodSubsets(vector<int>& nums) {

        int primes[10] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
        vector < long long > v; 
        map < long long , long long > mp; 
        long long ones = 0; 
        for(auto  x : nums){
            // count ones
            if(x == 1) ones++; 
            // store number is term of bitmask that we have discussed. 
            else {
                can_take(x , primes , mp);      
            }
        }

        for(auto & x : mp) v.push_back(x.first); 
        memset(dp , -1 , sizeof(dp)); 
        int md = 1e9 + 7; 
        long long ans = get_value(v , 0 , 0 , mp) % md; 
        // binary exponentiation to find power. 
        long long power = binary_exponentiation(2 , ones , md) % md; 
        ans = ((ans%md)*power%md) % md; 
        return ans%md;  
    }
};
