Question : Find in Mountain Array

Description : (This problem is an interactive problem.)
You may recall that an array arr is a mountain array if and only if:
arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array mountainArr, return the minimum index such that mountainArr.get(index) == target. If such an index does not exist, return -1.
You cannot access the mountain array directly. You may only access the array using a MountainArray interface:
MountainArray.get(k) returns the element of the array at index k (0-indexed).
MountainArray.length() returns the length of the array.
Submissions making more than 100 calls to MountainArray.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.

 Solution : class Solution {
public:
    int findInMountainArray(int target, MountainArray &mountainArr) {
        int N = mountainArr.length();
        int L = 1;
        int R = N - 2;

        // Find the peak of the mountain array
        while (L <= R) {
            int mid = (L + R) / 2;
            int L_V = mountainArr.get(mid - 1);
            int M_V = mountainArr.get(mid);
            int R_V = mountainArr.get(mid + 1);

            if (L_V < M_V && M_V > R_V) {
                L = R = mid;
                break;
            } else if (L_V < M_V && M_V < R_V) {
                L = mid + 1;
            } else {
                R = mid - 1;
            }
        }

        int peak = L; // or R, as they are equal here
        int l = 0, r = peak;
        int ans = INT_MAX;

        // Binary search on the increasing part
        while (l <= r) {
            int m = (l + r) / 2;
            int v = mountainArr.get(m);

            if (v == target) {
                ans = m;
                break; // Found in the first half
            } else if (v < target) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }

        if (ans != INT_MAX) return ans;

        // Binary search on the decreasing part
        l = peak + 1, r = N - 1;
        while (l <= r) {
            int m = (l + r) / 2;
            int v = mountainArr.get(m);

            if (v == target) {
                ans = m;
                break; // Found in the second half
            } else if (v < target) {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }

        return ans == INT_MAX ? -1 : ans;
    }
};
