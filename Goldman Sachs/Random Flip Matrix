Question : Random Flip Matrix

Description : There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.
Optimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.
Implement the Solution class:
Solution(int m, int n) Initializes the object with the size of the binary matrix m and n.
int[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.
void reset() Resets all the values of the matrix to be 0.

Solution : 
class Solution {
private:
    int m, n;
    int total;
    unordered_set<int> flipped;

public:
    Solution(int m, int n) {
        this->m = m;
        this->n = n;
        this->total = m * n;
        srand(time(0));
    }

    vector<int> flip() {
        int randIndex;
        do {
            randIndex = rand() % total;
        } while (flipped.count(randIndex));
        flipped.insert(randIndex);
        int row = randIndex / n;
        int col = randIndex % n;
        return {row, col};
    }

    void reset() {
        flipped.clear();
    }
};
